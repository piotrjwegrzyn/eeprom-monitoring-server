//go:build go1.22

// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for IpType.
const (
	N4 IpType = 4
	N6 IpType = 6
)

// IpType defines model for ipType.
type IpType int

// PageError defines model for PageError.
type PageError struct {
	Error        string  `json:"error"`
	ErrorDetails *string `json:"errorDetails,omitempty"`
}

// PostDeleteFormdataBody defines parameters for PostDelete.
type PostDeleteFormdataBody struct {
	DeleteId uint `form:"delete-id" json:"delete-id"`
}

// GetEditParams defines parameters for GetEdit.
type GetEditParams struct {
	EditId uint `form:"edit-id" json:"edit-id"`
}

// PostEditMultipartBody defines parameters for PostEdit.
type PostEditMultipartBody struct {
	EditId        uint                `json:"edit-id"`
	Hostname      string              `json:"hostname"`
	Ip            string              `json:"ip"`
	IpType        IpType              `json:"ip-type"`
	Key           *openapi_types.File `json:"key,omitempty"`
	KeyClear      *string             `json:"key-clear,omitempty"`
	Login         string              `json:"login"`
	Password      *string             `json:"password,omitempty"`
	PasswordClear *string             `json:"password-clear,omitempty"`
}

// GetLogoutParams defines parameters for GetLogout.
type GetLogoutParams struct {
	SessionToken *string `form:"session_token,omitempty" json:"session_token,omitempty"`
}

// PostNewMultipartBody defines parameters for PostNew.
type PostNewMultipartBody struct {
	Hostname string              `json:"hostname"`
	Ip       string              `json:"ip"`
	IpType   IpType              `json:"ip-type"`
	Key      *openapi_types.File `json:"key,omitempty"`
	Login    string              `json:"login"`
	Password *string             `json:"password,omitempty"`
}

// PostSigninFormdataBody defines parameters for PostSignin.
type PostSigninFormdataBody struct {
	Login    openapi_types.Email `form:"login" json:"login"`
	Password string              `form:"password" json:"password"`
}

// PostDeleteFormdataRequestBody defines body for PostDelete for application/x-www-form-urlencoded ContentType.
type PostDeleteFormdataRequestBody PostDeleteFormdataBody

// PostEditMultipartRequestBody defines body for PostEdit for multipart/form-data ContentType.
type PostEditMultipartRequestBody PostEditMultipartBody

// PostNewMultipartRequestBody defines body for PostNew for multipart/form-data ContentType.
type PostNewMultipartRequestBody PostNewMultipartBody

// PostSigninFormdataRequestBody defines body for PostSignin for application/x-www-form-urlencoded ContentType.
type PostSigninFormdataRequestBody PostSigninFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Main configuration page
	// (GET /)
	Get(w http.ResponseWriter, r *http.Request)
	// Load Edit device page
	// (POST /delete)
	PostDelete(w http.ResponseWriter, r *http.Request)
	// Load Edit device page
	// (GET /edit)
	GetEdit(w http.ResponseWriter, r *http.Request, params GetEditParams)
	// Update device
	// (POST /edit)
	PostEdit(w http.ResponseWriter, r *http.Request)
	// Log out
	// (GET /logout)
	GetLogout(w http.ResponseWriter, r *http.Request, params GetLogoutParams)
	// Load New device page
	// (GET /new)
	GetNew(w http.ResponseWriter, r *http.Request)
	// Create new device
	// (POST /new)
	PostNew(w http.ResponseWriter, r *http.Request)
	// Load signin page
	// (GET /signin)
	GetSignin(w http.ResponseWriter, r *http.Request)
	// Handle login
	// (POST /signin)
	PostSignin(w http.ResponseWriter, r *http.Request)
	// Serve the favicon
	// (GET /static/favicon.ico)
	GetStaticFaviconIco(w http.ResponseWriter, r *http.Request)
	// Serve the CSS stylesheet
	// (GET /static/style.css)
	GetStaticStyleCss(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Get(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDelete operation middleware
func (siw *ServerInterfaceWrapper) PostDelete(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDelete(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEdit operation middleware
func (siw *ServerInterfaceWrapper) GetEdit(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEditParams

	// ------------- Required query parameter "edit-id" -------------

	if paramValue := r.URL.Query().Get("edit-id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "edit-id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "edit-id", r.URL.Query(), &params.EditId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "edit-id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEdit(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEdit operation middleware
func (siw *ServerInterfaceWrapper) PostEdit(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEdit(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetLogout operation middleware
func (siw *ServerInterfaceWrapper) GetLogout(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLogoutParams

	{
		var cookie *http.Cookie

		if cookie, err = r.Cookie("session_token"); err == nil {
			var value string
			err = runtime.BindStyledParameterWithOptions("simple", "session_token", cookie.Value, &value, runtime.BindStyledParameterOptions{Explode: true, Required: false})
			if err != nil {
				siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "session_token", Err: err})
				return
			}
			params.SessionToken = &value

		}
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLogout(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNew operation middleware
func (siw *ServerInterfaceWrapper) GetNew(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNew(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostNew operation middleware
func (siw *ServerInterfaceWrapper) PostNew(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, CookieAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNew(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSignin operation middleware
func (siw *ServerInterfaceWrapper) GetSignin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostSignin operation middleware
func (siw *ServerInterfaceWrapper) PostSignin(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStaticFaviconIco operation middleware
func (siw *ServerInterfaceWrapper) GetStaticFaviconIco(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStaticFaviconIco(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetStaticStyleCss operation middleware
func (siw *ServerInterfaceWrapper) GetStaticStyleCss(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStaticStyleCss(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/", wrapper.Get)
	m.HandleFunc("POST "+options.BaseURL+"/delete", wrapper.PostDelete)
	m.HandleFunc("GET "+options.BaseURL+"/edit", wrapper.GetEdit)
	m.HandleFunc("POST "+options.BaseURL+"/edit", wrapper.PostEdit)
	m.HandleFunc("GET "+options.BaseURL+"/logout", wrapper.GetLogout)
	m.HandleFunc("GET "+options.BaseURL+"/new", wrapper.GetNew)
	m.HandleFunc("POST "+options.BaseURL+"/new", wrapper.PostNew)
	m.HandleFunc("GET "+options.BaseURL+"/signin", wrapper.GetSignin)
	m.HandleFunc("POST "+options.BaseURL+"/signin", wrapper.PostSignin)
	m.HandleFunc("GET "+options.BaseURL+"/static/favicon.ico", wrapper.GetStaticFaviconIco)
	m.HandleFunc("GET "+options.BaseURL+"/static/style.css", wrapper.GetStaticStyleCss)

	return m
}

type PageTexthtmlResponse struct {
	Body io.Reader

	ContentLength int64
}

type PageErrorJSONResponse struct {
	Error        string  `json:"error"`
	ErrorDetails *string `json:"errorDetails,omitempty"`
}

type PageRedirectResponseHeaders struct {
	Location string
}
type PageRedirectResponse struct {
	Headers PageRedirectResponseHeaders
}

type GetRequestObject struct {
}

type GetResponseObject interface {
	VisitGetResponse(w http.ResponseWriter) error
}

type Get200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response Get200TexthtmlResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type Get303Response = PageRedirectResponse

func (response Get303Response) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type Get500JSONResponse struct{ PageErrorJSONResponse }

func (response Get500JSONResponse) VisitGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostDeleteRequestObject struct {
	Body *PostDeleteFormdataRequestBody
}

type PostDeleteResponseObject interface {
	VisitPostDeleteResponse(w http.ResponseWriter) error
}

type PostDelete303Response = PageRedirectResponse

func (response PostDelete303Response) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostDelete500JSONResponse struct{ PageErrorJSONResponse }

func (response PostDelete500JSONResponse) VisitPostDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEditRequestObject struct {
	Params GetEditParams
}

type GetEditResponseObject interface {
	VisitGetEditResponse(w http.ResponseWriter) error
}

type GetEdit200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response GetEdit200TexthtmlResponse) VisitGetEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetEdit303Response = PageRedirectResponse

func (response GetEdit303Response) VisitGetEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetEdit500JSONResponse struct{ PageErrorJSONResponse }

func (response GetEdit500JSONResponse) VisitGetEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEditRequestObject struct {
	Body *multipart.Reader
}

type PostEditResponseObject interface {
	VisitPostEditResponse(w http.ResponseWriter) error
}

type PostEdit200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response PostEdit200TexthtmlResponse) VisitPostEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostEdit303Response = PageRedirectResponse

func (response PostEdit303Response) VisitPostEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostEdit500JSONResponse struct{ PageErrorJSONResponse }

func (response PostEdit500JSONResponse) VisitPostEditResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetLogoutRequestObject struct {
	Params GetLogoutParams
}

type GetLogoutResponseObject interface {
	VisitGetLogoutResponse(w http.ResponseWriter) error
}

type GetLogout303Response = PageRedirectResponse

func (response GetLogout303Response) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetLogout500JSONResponse struct{ PageErrorJSONResponse }

func (response GetLogout500JSONResponse) VisitGetLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetNewRequestObject struct {
}

type GetNewResponseObject interface {
	VisitGetNewResponse(w http.ResponseWriter) error
}

type GetNew200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response GetNew200TexthtmlResponse) VisitGetNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetNew303Response = PageRedirectResponse

func (response GetNew303Response) VisitGetNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type GetNew500JSONResponse struct{ PageErrorJSONResponse }

func (response GetNew500JSONResponse) VisitGetNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostNewRequestObject struct {
	Body *multipart.Reader
}

type PostNewResponseObject interface {
	VisitPostNewResponse(w http.ResponseWriter) error
}

type PostNew200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response PostNew200TexthtmlResponse) VisitPostNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostNew303Response = PageRedirectResponse

func (response PostNew303Response) VisitPostNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostNew500JSONResponse struct{ PageErrorJSONResponse }

func (response PostNew500JSONResponse) VisitPostNewResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSigninRequestObject struct {
}

type GetSigninResponseObject interface {
	VisitGetSigninResponse(w http.ResponseWriter) error
}

type GetSignin200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response GetSignin200TexthtmlResponse) VisitGetSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetSignin500JSONResponse struct{ PageErrorJSONResponse }

func (response GetSignin500JSONResponse) VisitGetSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostSigninRequestObject struct {
	Body *PostSigninFormdataRequestBody
}

type PostSigninResponseObject interface {
	VisitPostSigninResponse(w http.ResponseWriter) error
}

type PostSignin200TexthtmlResponse struct{ PageTexthtmlResponse }

func (response PostSignin200TexthtmlResponse) VisitPostSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/html")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type PostSignin303Response = PageRedirectResponse

func (response PostSignin303Response) VisitPostSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(303)
	return nil
}

type PostSignin500JSONResponse struct{ PageErrorJSONResponse }

func (response PostSignin500JSONResponse) VisitPostSigninResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStaticFaviconIcoRequestObject struct {
}

type GetStaticFaviconIcoResponseObject interface {
	VisitGetStaticFaviconIcoResponse(w http.ResponseWriter) error
}

type GetStaticFaviconIco200ImagexIconResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetStaticFaviconIco200ImagexIconResponse) VisitGetStaticFaviconIcoResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/x-icon")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetStaticStyleCssRequestObject struct {
}

type GetStaticStyleCssResponseObject interface {
	VisitGetStaticStyleCssResponse(w http.ResponseWriter) error
}

type GetStaticStyleCss200TextcssResponse struct {
	Body          io.Reader
	ContentLength int64
}

func (response GetStaticStyleCss200TextcssResponse) VisitGetStaticStyleCssResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "text/css")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Main configuration page
	// (GET /)
	Get(ctx context.Context, request GetRequestObject) (GetResponseObject, error)
	// Load Edit device page
	// (POST /delete)
	PostDelete(ctx context.Context, request PostDeleteRequestObject) (PostDeleteResponseObject, error)
	// Load Edit device page
	// (GET /edit)
	GetEdit(ctx context.Context, request GetEditRequestObject) (GetEditResponseObject, error)
	// Update device
	// (POST /edit)
	PostEdit(ctx context.Context, request PostEditRequestObject) (PostEditResponseObject, error)
	// Log out
	// (GET /logout)
	GetLogout(ctx context.Context, request GetLogoutRequestObject) (GetLogoutResponseObject, error)
	// Load New device page
	// (GET /new)
	GetNew(ctx context.Context, request GetNewRequestObject) (GetNewResponseObject, error)
	// Create new device
	// (POST /new)
	PostNew(ctx context.Context, request PostNewRequestObject) (PostNewResponseObject, error)
	// Load signin page
	// (GET /signin)
	GetSignin(ctx context.Context, request GetSigninRequestObject) (GetSigninResponseObject, error)
	// Handle login
	// (POST /signin)
	PostSignin(ctx context.Context, request PostSigninRequestObject) (PostSigninResponseObject, error)
	// Serve the favicon
	// (GET /static/favicon.ico)
	GetStaticFaviconIco(ctx context.Context, request GetStaticFaviconIcoRequestObject) (GetStaticFaviconIcoResponseObject, error)
	// Serve the CSS stylesheet
	// (GET /static/style.css)
	GetStaticStyleCss(ctx context.Context, request GetStaticStyleCssRequestObject) (GetStaticStyleCssResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Get operation middleware
func (sh *strictHandler) Get(w http.ResponseWriter, r *http.Request) {
	var request GetRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Get(ctx, request.(GetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Get")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResponseObject); ok {
		if err := validResponse.VisitGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostDelete operation middleware
func (sh *strictHandler) PostDelete(w http.ResponseWriter, r *http.Request) {
	var request PostDeleteRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostDeleteFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostDelete(ctx, request.(PostDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostDelete")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostDeleteResponseObject); ok {
		if err := validResponse.VisitPostDeleteResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEdit operation middleware
func (sh *strictHandler) GetEdit(w http.ResponseWriter, r *http.Request, params GetEditParams) {
	var request GetEditRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEdit(ctx, request.(GetEditRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEdit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEditResponseObject); ok {
		if err := validResponse.VisitGetEditResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEdit operation middleware
func (sh *strictHandler) PostEdit(w http.ResponseWriter, r *http.Request) {
	var request PostEditRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEdit(ctx, request.(PostEditRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEdit")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEditResponseObject); ok {
		if err := validResponse.VisitPostEditResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetLogout operation middleware
func (sh *strictHandler) GetLogout(w http.ResponseWriter, r *http.Request, params GetLogoutParams) {
	var request GetLogoutRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetLogout(ctx, request.(GetLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLogout")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetLogoutResponseObject); ok {
		if err := validResponse.VisitGetLogoutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetNew operation middleware
func (sh *strictHandler) GetNew(w http.ResponseWriter, r *http.Request) {
	var request GetNewRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetNew(ctx, request.(GetNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetNew")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetNewResponseObject); ok {
		if err := validResponse.VisitGetNewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostNew operation middleware
func (sh *strictHandler) PostNew(w http.ResponseWriter, r *http.Request) {
	var request PostNewRequestObject

	if reader, err := r.MultipartReader(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode multipart body: %w", err))
		return
	} else {
		request.Body = reader
	}

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostNew(ctx, request.(PostNewRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostNew")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostNewResponseObject); ok {
		if err := validResponse.VisitPostNewResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSignin operation middleware
func (sh *strictHandler) GetSignin(w http.ResponseWriter, r *http.Request) {
	var request GetSigninRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSignin(ctx, request.(GetSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSignin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSigninResponseObject); ok {
		if err := validResponse.VisitGetSigninResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostSignin operation middleware
func (sh *strictHandler) PostSignin(w http.ResponseWriter, r *http.Request) {
	var request PostSigninRequestObject

	if err := r.ParseForm(); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode formdata: %w", err))
		return
	}
	var body PostSigninFormdataRequestBody
	if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't bind formdata: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostSignin(ctx, request.(PostSigninRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostSignin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostSigninResponseObject); ok {
		if err := validResponse.VisitPostSigninResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStaticFaviconIco operation middleware
func (sh *strictHandler) GetStaticFaviconIco(w http.ResponseWriter, r *http.Request) {
	var request GetStaticFaviconIcoRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStaticFaviconIco(ctx, request.(GetStaticFaviconIcoRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStaticFaviconIco")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStaticFaviconIcoResponseObject); ok {
		if err := validResponse.VisitGetStaticFaviconIcoResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetStaticStyleCss operation middleware
func (sh *strictHandler) GetStaticStyleCss(w http.ResponseWriter, r *http.Request) {
	var request GetStaticStyleCssRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetStaticStyleCss(ctx, request.(GetStaticStyleCssRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStaticStyleCss")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetStaticStyleCssResponseObject); ok {
		if err := validResponse.VisitGetStaticStyleCssResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+V4hbH7aBstx6Gzq9ZW3WBUs6o25eZrgBI51lNhKpkqc4XqD/fSAp//4R",
	"r1uxLNiLLcl3x7vv7vso8x5SXVZaoSILyT0YtJVWFv1NX+TovlOtCBW5S8I7iidUFu7GphMshX88qxAS",
	"sGSkyqFpGg4Z2tTIiqRWkMC5Fhkz+KlGS5ixykVuuF/h1BhtNpYRVVXIVDjn+KN1EVZXq4yu0JAMWeLc",
	"H+9EWRUuDx+SlWitW4dvpseDz2skIQu7yzXzP2G2P0bDwZUjDWaQDNskRgszff0RUzoSCTaVNGEhRAvK",
	"O8ykcRGS+w3/+S+MdICRwwRFhsYXcq4Datt+r72X1IrpMTPz8HwFVlR16WqJgUNsZa6kchUtsZk/3AbD",
	"1xki+TRk9d5bLIJ+x39YgiMVYY7Gg2gxrY2k2cA5h4amWt9IPKlp4kO55MMj4KBE6RdGa6VWV6RvcCUf",
	"UclfcRZQl2qst1E4Ueykf8bG2jCRpi6Kylmq1VjmtfHIhY7oMTs97b/77YJdaCVJuzrZAM0tGuBQyBSV",
	"9fW1Cb15e8neoEIjCtavrwuZsvNgxG7RuFxZj2nDCkHom0ySwrxdDNjY+MnPXGrAoXWABLqd552us9YV",
	"KlFJSKDX6XZ6wKESNPFoxe4jRz8pjha+iLPM5YSuv2uMftHtuq9nBseQwFfxkvzxwi7ut+TsdXvHGS+G",
	"teHw/bErBNqvjgAkw/XmD0fNiIOty1KYGSRwIaTa0SwfJM6wQPItqbTdgUZfW3odbAJ10dJPOpsdUJ67",
	"aDqdRmNtyqg2BapUZ47t+6Uo5BBJb+T8BEECtVQEO4d/VUGWvrtVZGlLpsZmo7GPrlde5k4zSSzDW5ni",
	"Sqcwk3RoaJ2Xn3AjSiQvbMNWBz7VaGZLGXCRHGKb6Kyq2oNtGD0pjuzBnR9gRYv3fk6UdUGyEoZiz4VM",
	"kDi4IbddOQJ8DhNtKXTzfnubltWexxG128suDNt9KG43oYbDDc7WsrmWSvg52gp9g7MoLVCYNfsPWj3b",
	"ZV3oXPqtthJEaNyEfhiK6I+T6PfRMOpchctu9OPo2+HyemeoSlg71WYdtcXDAw5Hp7v5xrLgzqIFHvAl",
	"vPP6PkeP/tskuqwyQdgyKIhWoXNdH5St82CxW7geeoHZ/yo9evxKnzNXuIdJ4fQQRm9xCk9Pbt/i9Hi1",
	"nUPwD4ntI9PPf08RN+Ttf1HbHNVXBp2oqcWwBsa2/+kOkHYw/9f3+WD8vbq2GReSPoJtK7l/kTf+xbwv",
	"JhRLIQvgUIq7c1S560TvBYdSqvntC76DHY4GXw+jq87y9pv757z3vPkC5AhZr0R5imxYm5pfhMoKZKHw",
	"MPckSKbxWNzKVKuOTPVBDnjrn4PxWar3sGFlrGQpcozvIuewPkEPyuj2odH7CbI204Nl+hMKRhvW81ot",
	"zQrspNY+XOnAmb6y9uE6/YlgG/MvHAi6il4NBsznZCeIdGRhW05HaKA/twlvY+tZnF4M2OUZcKhNAQlM",
	"iKokjgudisJtIMnL7ssuNKPmzwAAAP//ZJHCkicVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
