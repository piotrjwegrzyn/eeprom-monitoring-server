// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createDevice = `-- name: CreateDevice :exec
INSERT INTO devices (hostname, ip, login, passwd, keyfile, connected)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateDeviceParams struct {
	Hostname  string
	Ip        string
	Login     string
	Passwd    sql.NullString
	Keyfile   sql.NullString
	Connected time.Time
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) error {
	_, err := q.db.ExecContext(ctx, createDevice,
		arg.Hostname,
		arg.Ip,
		arg.Login,
		arg.Passwd,
		arg.Keyfile,
		arg.Connected,
	)
	return err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE devices.id = ?
`

func (q *Queries) DeleteDevice(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteDevice, id)
	return err
}

const device = `-- name: Device :one
SELECT id, hostname, ip, login, passwd, keyfile, connected, last_status FROM devices
WHERE devices.id = ?
`

func (q *Queries) Device(ctx context.Context, id uint32) (Device, error) {
	row := q.db.QueryRowContext(ctx, device, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Hostname,
		&i.Ip,
		&i.Login,
		&i.Passwd,
		&i.Keyfile,
		&i.Connected,
		&i.LastStatus,
	)
	return i, err
}

const devices = `-- name: Devices :many
SELECT id, hostname, ip, login, passwd, keyfile, connected, last_status FROM devices
`

func (q *Queries) Devices(ctx context.Context) ([]Device, error) {
	rows, err := q.db.QueryContext(ctx, devices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Hostname,
			&i.Ip,
			&i.Login,
			&i.Passwd,
			&i.Keyfile,
			&i.Connected,
			&i.LastStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices
SET hostname    = ?,
    ip          = ?,
    login       = ?,
    passwd      = ?,
    keyfile     = ?,
    last_status = ?,
    connected   = ?
WHERE devices.id = ?
`

type UpdateDeviceParams struct {
	Hostname   string
	Ip         string
	Login      string
	Passwd     sql.NullString
	Keyfile    sql.NullString
	LastStatus int32
	Connected  time.Time
	ID         uint32
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.ExecContext(ctx, updateDevice,
		arg.Hostname,
		arg.Ip,
		arg.Login,
		arg.Passwd,
		arg.Keyfile,
		arg.LastStatus,
		arg.Connected,
		arg.ID,
	)
	return err
}

const updateDeviceStatus = `-- name: UpdateDeviceStatus :exec
UPDATE devices
SET last_status = ?,
    connected   = ?
WHERE devices.id = ?
`

type UpdateDeviceStatusParams struct {
	LastStatus int32
	Connected  time.Time
	ID         uint32
}

func (q *Queries) UpdateDeviceStatus(ctx context.Context, arg UpdateDeviceStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDeviceStatus, arg.LastStatus, arg.Connected, arg.ID)
	return err
}
